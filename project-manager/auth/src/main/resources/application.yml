spring:
  application:
    name: "auth"
  datasource:
    url: ${DB_DATASOURCE_URL}
    password: ${DB_DATASOURCE_PASSWORD}
    username: ${DB_DATASOURCE_USERNAME}
  main:
    lazy-initialization: true
    allow-bean-definition-overriding: true
  cloud:
    config:
      enabled: false
  api-docs:
    path: ${API_DOCS_PATH}
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    topic-auth:
      name: ${KAFKA_AUTH_TOPIC_NAME}
    topic-verify:
      name: ${KAFKA_VERIFY_TOPIC_NAME}
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${CLIENT_ID}
            authorization-grant-type: ${AUTHORIZATION_GRANT_TYPE}
            scope:
              - openid
              - profile
              - email
        provider:
          keycloak:
            user-name-attribute: ${USERNAME_ATTRIBUTE}
            issuer-uri: ${ISSUER_URI}
            jwk-set-uri: ${JWK_SET_URI}
            authorization-uri: ${AUTHORIZATION_URI}
            token-uri: ${TOKEN_URI}
jpa:
   hibernate:
     ddl-auto: update
   properties:
     hibernate:
       dialect: org.hibernate.dialect.Postgresql
jwt:
  secret: ${JWT_SECRET}
  lifetime: ${JWT_LIFETIME}
refresh-authorization:
  lifetime: 28800000
server:
  port: 8090
verification:
  lifetime: 600000 #10 minutes
keycloak:
  realm: ${REALM_NAME}
  server-url: ${SERVER_URL}
  client-id: ${CLIENT_ID}
  grant-type: ${GRANT_TYPE}
  username: ${USERNAME}
  password: ${PASSWORD}

redis:
